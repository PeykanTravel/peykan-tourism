#!/usr/bin/env python
"""
Simple Test - Tests core functionality without database operations
"""

import os
import sys
import django
from decimal import Decimal

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'peykan.settings')
django.setup()

from transfers.models import TransferRoute, TransferOption

def test_core_functionality():
    """Test core functionality without database operations."""
    print("üß™ Testing Core Transfer Functionality")
    print("="*50)
    
    try:
        # 1. Test TransferRoute methods
        print("1. Testing TransferRoute methods...")
        route = TransferRoute(
            origin='Test Airport',
            destination='Test City',
            peak_hour_surcharge=Decimal('15.00'),
            midnight_surcharge=Decimal('10.00'),
            round_trip_discount_enabled=True,
            round_trip_discount_percentage=Decimal('10.00')
        )
        
        base_price = Decimal('25.00')
        
        # Test time surcharge calculations
        peak_surcharge = route.calculate_time_surcharge(base_price, 8)  # 8 AM
        off_peak_surcharge = route.calculate_time_surcharge(base_price, 14)  # 2 PM
        midnight_surcharge = route.calculate_time_surcharge(base_price, 23)  # 11 PM
        
        print(f"   ‚úÖ Peak hour surcharge (8 AM): ${peak_surcharge}")
        print(f"   ‚úÖ Off-peak surcharge (2 PM): ${off_peak_surcharge}")
        print(f"   ‚úÖ Midnight surcharge (11 PM): ${midnight_surcharge}")
        
        # 2. Test TransferOption methods
        print("\n2. Testing TransferOption methods...")
        
        # Fixed price option
        fixed_option = TransferOption(
            option_type='wheelchair',
            price_type='fixed',
            price=Decimal('10.00'),
            price_percentage=Decimal('0.00')
        )
        fixed_price = fixed_option.calculate_price(base_price)
        print(f"   ‚úÖ Fixed price option: ${fixed_price}")
        
        # Percentage price option
        percentage_option = TransferOption(
            option_type='english_driver',
            price_type='percentage',
            price=Decimal('0.00'),
            price_percentage=Decimal('15.00')
        )
        percentage_price = percentage_option.calculate_price(base_price)
        print(f"   ‚úÖ Percentage price option: ${percentage_price}")
        
        # 3. Test complete pricing calculation
        print("\n3. Testing complete pricing calculation...")
        
        # Base price
        total_price = base_price
        
        # Add time surcharge (peak hour)
        total_price += peak_surcharge
        
        # Add options
        total_price += fixed_price + percentage_price
        
        # Round trip discount (if applicable)
        if route.round_trip_discount_enabled:
            discount = total_price * (route.round_trip_discount_percentage / 100)
            total_price -= discount
            print(f"   ‚úÖ Round trip discount: ${discount}")
        
        print(f"   ‚úÖ Base price: ${base_price}")
        print(f"   ‚úÖ Time surcharge: ${peak_surcharge}")
        print(f"   ‚úÖ Options total: ${fixed_price + percentage_price}")
        print(f"   ‚úÖ Final price: ${total_price}")
        
        # 4. Test model field access
        print("\n4. Testing model field access...")
        print(f"   ‚úÖ Route: {route.origin} ‚Üí {route.destination}")
        print(f"   ‚úÖ Peak hour surcharge: {route.peak_hour_surcharge}%")
        print(f"   ‚úÖ Midnight surcharge: {route.midnight_surcharge}%")
        print(f"   ‚úÖ Fixed option type: {fixed_option.get_option_type_display()}")
        print(f"   ‚úÖ Percentage option type: {percentage_option.get_option_type_display()}")
        
        print("\n‚úÖ All core functionality tests passed!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_model_choices():
    """Test model choices and validation."""
    print("\nüß™ Testing Model Choices")
    print("="*30)
    
    try:
        # Test vehicle type choices
        print("1. Testing vehicle type choices...")
        vehicle_choices = TransferRoute._meta.get_field('peak_hour_surcharge').choices
        print(f"   ‚úÖ Peak hour surcharge field exists")
        
        # Test option type choices
        print("2. Testing option type choices...")
        option_choices = TransferOption._meta.get_field('option_type').choices
        print(f"   ‚úÖ Option type choices: {len(option_choices)} options")
        
        # Test price type choices
        print("3. Testing price type choices...")
        price_type_choices = TransferOption._meta.get_field('price_type').choices
        print(f"   ‚úÖ Price type choices: {len(price_type_choices)} options")
        
        print("\n‚úÖ All choice tests passed!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Choice test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all tests."""
    print("üöÄ Starting Simple Transfer Tests")
    print("="*60)
    
    success1 = test_core_functionality()
    success2 = test_model_choices()
    
    if success1 and success2:
        print("\nüéâ ALL TESTS PASSED!")
        print("\nüìã SUMMARY:")
        print("   ‚úÖ Core pricing calculations")
        print("   ‚úÖ Time surcharge calculations")
        print("   ‚úÖ Option price calculations")
        print("   ‚úÖ Round trip discount calculations")
        print("   ‚úÖ Model field access")
        print("   ‚úÖ Model choices validation")
        print("\n‚úÖ Transfer Product Backend is working correctly!")
        return True
    else:
        print("\n‚ùå SOME TESTS FAILED!")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 