# Generated by Django 5.0.2 on 2025-07-18 23:39

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reservation_number', models.CharField(db_index=True, max_length=20, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('expired', 'Expired')], db_index=True, default='draft', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], db_index=True, default='pending', max_length=20)),
                ('customer_name', models.CharField(max_length=255)),
                ('customer_email', models.EmailField(db_index=True, max_length=254)),
                ('customer_phone', models.CharField(max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('discount_code', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_reservations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reservations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReservationHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('from_status', models.CharField(max_length=20)),
                ('to_status', models.CharField(max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='reservations.reservation')),
            ],
            options={
                'verbose_name_plural': 'Reservation histories',
                'db_table': 'reservation_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReservationItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product_type', models.CharField(choices=[('event', 'Event'), ('tour', 'Tour'), ('transfer', 'Transfer')], db_index=True, max_length=20)),
                ('product_id', models.CharField(db_index=True, max_length=100)),
                ('product_title', models.CharField(max_length=255)),
                ('product_slug', models.CharField(blank=True, max_length=255)),
                ('variant_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('variant_name', models.CharField(blank=True, max_length=255, null=True)),
                ('booking_date', models.DateField(db_index=True)),
                ('booking_time', models.TimeField()),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('selected_options', models.JSONField(blank=True, default=list)),
                ('options_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('booking_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='reservations.reservation')),
            ],
            options={
                'db_table': 'reservation_items',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['user', 'status'], name='reservation_user_id_d4fda7_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['status', 'created_at'], name='reservation_status_2d72d6_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['customer_email', 'status'], name='reservation_custome_cb74d2_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['reservation_number', 'status'], name='reservation_reserva_711867_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['expires_at', 'status'], name='reservation_expires_2b70cb_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationhistory',
            index=models.Index(fields=['reservation', 'created_at'], name='reservation_reserva_fcadce_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationhistory',
            index=models.Index(fields=['from_status', 'to_status'], name='reservation_from_st_0e0152_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationhistory',
            index=models.Index(fields=['changed_by', 'created_at'], name='reservation_changed_9b0fa9_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationitem',
            index=models.Index(fields=['reservation', 'product_type'], name='reservation_reserva_3355ce_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationitem',
            index=models.Index(fields=['product_type', 'product_id'], name='reservation_product_31e1ef_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationitem',
            index=models.Index(fields=['booking_date', 'product_type'], name='reservation_booking_ed46b6_idx'),
        ),
        migrations.AddIndex(
            model_name='reservationitem',
            index=models.Index(fields=['variant_id', 'product_type'], name='reservation_variant_395599_idx'),
        ),
    ]
